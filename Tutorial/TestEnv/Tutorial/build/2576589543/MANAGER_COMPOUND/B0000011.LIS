               #include "C:/Users/vjtkmg/Documents/GitLocal/VectorCAST/Tutorial/SourceCode/c/ctypes.h"
               struct table_data_type Get_Table_Record(table_index_type Table);
               void Update_Table_Record(table_index_type Table, struct table_data_type Data);
               /* Allow 10 Parties to wait */
               static name_type WaitingList[10];
               static unsigned int WaitingListSize = 0;
               static unsigned int WaitingListIndex = 0;
               /* This function will add a free dessert to specific orders based on the 
                  entree, salad, and beverage choice */
               void Add_Included_Dessert(struct order_type* Order)
               {
1 0     ( )    Add_Included_Dessert
1 1     ( )( )   if(
1 1.1   ( )( )   Order->Entree == STEAK &&
1 1.2   ( )( )   Order->Salad == CAESAR &&
1 1.3   ( )( )   Order->Beverage == MIXED_DRINK) {
1 2                Order->Dessert = PIE;
                 } else 
1 3     ( )( )     if(
1 3.1   ( )( )     Order->Entree == LOBSTER &&
1 3.2   ( )( )     Order->Salad == GREEN &&
1 3.3   ( )( )     Order->Beverage == WINE) {
1 4                  Order->Dessert = CAKE;
                 }
               }
               int Place_Order(table_index_type Table,
                               seat_index_type Seat,
                               struct order_type MyOrder)
               {
                 struct table_data_type Table_Data;
2 0     ( )    Place_Order
2 1              Table_Data = Get_Table_Record(Table);
2 2              Table_Data.Is_Occupied = v_true;
2 3              Table_Data.Number_In_Party = Table_Data.Number_In_Party + 1;
2 4              Table_Data.Order[Seat] = MyOrder;
                 /* Add a free dessert in some cases */
2 5              Add_Included_Dessert(&Table_Data.Order[Seat]);
2 6              switch(MyOrder.Entree)
                   {
2 7     ( )        case NO_ENTREE :
2 8                  break;
2 9     ( )        case STEAK :
2 10                 Table_Data.Check_Total = Table_Data.Check_Total + 14.0 + 10;
2 11                 break;
2 12    ( )        case CHICKEN :
2 13                 Table_Data.Check_Total = Table_Data.Check_Total + 10.0;
2 14                 break;
2 15    ( )        case LOBSTER :
2 16                 Table_Data.Check_Total = Table_Data.Check_Total + 18.0;
2 17                 break;
2 18    ( )        case PASTA :
2 19                 Table_Data.Check_Total = Table_Data.Check_Total + 12.0;
2 20                 break;
                   }
2 21             Update_Table_Record(Table, Table_Data);
2 22             return 0;
               }
               int Clear_Table(table_index_type Table)
               {
                 struct table_data_type Table_Data;
                 seat_index_type Seat;
3 0     ( )    Clear_Table
3 1              Table_Data = Get_Table_Record(Table);
3 2              Table_Data.Is_Occupied = v_false;
3 3              Table_Data.Number_In_Party = 1;
3 4     ( )( )   for (Seat=0; 
3 4.1   ( )( )   Seat < 4; Seat++){
3 5                Table_Data.Order[Seat].Soup = NO_SOUP;
3 6                Table_Data.Order[Seat].Salad = NO_SALAD;
3 7                Table_Data.Order[Seat].Entree = NO_ENTREE;
3 8                Table_Data.Order[Seat].Dessert = NO_DESSERT;
3 9                Table_Data.Order[Seat].Beverage = NO_BEVERAGE;
                  }
3 10             Table_Data.Check_Total = 0;
3 11             Update_Table_Record(Table, Table_Data);
3 12             return 0;
               }
               FLOAT Get_Check_Total(table_index_type Table)
               {
                 struct table_data_type Table_Data;
4 0     ( )    Get_Check_Total
4 1              Table_Data = Get_Table_Record(Table);
4 2              return (Table_Data.Check_Total);
               }
               void Add_Party_To_Waiting_List(char* Name)
               {
5 0     ( )    Add_Party_To_Waiting_List
5 1              int i = 0;
5 2     ( )( )   if(
5 2.1   ( )( )   WaitingListSize > 9)
5 3                WaitingListSize = 0;
5 4     ( )( )   while(
5 4.1   ( )( )   Name && 
5 4.2   ( )( )   *Name) {
5 5                WaitingList[WaitingListSize][i++] = *Name;
5 6                Name++;
                 }
5 7              WaitingList[WaitingListSize++][i] = 0;
               }
               char* Get_Next_Party_To_Be_Seated(void)
               {
6 0     ( )    Get_Next_Party_To_Be_Seated
6 1     ( )( )   if(
6 1.1   ( )( )   WaitingListIndex > 9)
6 2                WaitingListIndex = 0;
6 3              return WaitingList[WaitingListIndex++];
               }
